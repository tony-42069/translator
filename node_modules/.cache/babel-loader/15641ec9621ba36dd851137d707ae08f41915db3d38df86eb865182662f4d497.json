{"ast":null,"code":"// src/services/ElevenLabsService.js\nclass ElevenLabsService{constructor(){this.API_KEY=process.env.REACT_APP_ELEVENLABS_API_KEY;if(!this.API_KEY){console.error('ElevenLabs API key not found in environment variables');}this.API_URL='https://api.elevenlabs.io/v1';this.voice_id='21m00Tcm4TlvDq8ikWAM';// Rachel voice\n}async textToSpeech(text){let language=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en';try{const response=await fetch(\"\".concat(this.API_URL,\"/text-to-speech/\").concat(this.voice_id),{method:'POST',headers:{'Accept':'audio/mpeg','Content-Type':'application/json','xi-api-key':this.API_KEY},body:JSON.stringify({text:text,model_id:'eleven_monolingual_v1',voice_settings:{stability:0.5,similarity_boost:0.75}})});if(!response.ok){throw new Error('TTS request failed');}const audioBlob=await response.blob();const audioUrl=URL.createObjectURL(audioBlob);const audio=new Audio(audioUrl);await audio.play();}catch(error){console.error('ElevenLabs TTS error:',error);throw error;}}// Get available voices (useful for later)\nasync getVoices(){try{const response=await fetch(\"\".concat(this.API_URL,\"/voices\"),{headers:{'xi-api-key':this.API_KEY}});if(!response.ok){throw new Error('Failed to fetch voices');}return await response.json();}catch(error){console.error('Failed to get voices:',error);throw error;}}}export default new ElevenLabsService();","map":{"version":3,"names":["ElevenLabsService","constructor","API_KEY","process","env","REACT_APP_ELEVENLABS_API_KEY","console","error","API_URL","voice_id","textToSpeech","text","language","arguments","length","undefined","response","fetch","concat","method","headers","body","JSON","stringify","model_id","voice_settings","stability","similarity_boost","ok","Error","audioBlob","blob","audioUrl","URL","createObjectURL","audio","Audio","play","getVoices","json"],"sources":["D:/AI Projects/translator/src/services/ElevenLabsService.js"],"sourcesContent":["// src/services/ElevenLabsService.js\n\nclass ElevenLabsService {\n  constructor() {\n    this.API_KEY = process.env.REACT_APP_ELEVENLABS_API_KEY;\n    if (!this.API_KEY) {\n      console.error('ElevenLabs API key not found in environment variables');\n    }\n    this.API_URL = 'https://api.elevenlabs.io/v1';\n    this.voice_id = '21m00Tcm4TlvDq8ikWAM'; // Rachel voice\n  }\n\n  async textToSpeech(text, language = 'en') {\n    try {\n      const response = await fetch(\n        `${this.API_URL}/text-to-speech/${this.voice_id}`,\n        {\n          method: 'POST',\n          headers: {\n            'Accept': 'audio/mpeg',\n            'Content-Type': 'application/json',\n            'xi-api-key': this.API_KEY,\n          },\n          body: JSON.stringify({\n            text: text,\n            model_id: 'eleven_monolingual_v1',\n            voice_settings: {\n              stability: 0.5,\n              similarity_boost: 0.75,\n            },\n          }),\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('TTS request failed');\n      }\n\n      const audioBlob = await response.blob();\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      await audio.play();\n\n    } catch (error) {\n      console.error('ElevenLabs TTS error:', error);\n      throw error;\n    }\n  }\n\n  // Get available voices (useful for later)\n  async getVoices() {\n    try {\n      const response = await fetch(`${this.API_URL}/voices`, {\n        headers: {\n          'xi-api-key': this.API_KEY,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch voices');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get voices:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new ElevenLabsService();"],"mappings":"AAAA;AAEA,KAAM,CAAAA,iBAAkB,CACtBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,4BAA4B,CACvD,GAAI,CAAC,IAAI,CAACH,OAAO,CAAE,CACjBI,OAAO,CAACC,KAAK,CAAC,uDAAuD,CAAC,CACxE,CACA,IAAI,CAACC,OAAO,CAAG,8BAA8B,CAC7C,IAAI,CAACC,QAAQ,CAAG,sBAAsB,CAAE;AAC1C,CAEA,KAAM,CAAAC,YAAYA,CAACC,IAAI,CAAmB,IAAjB,CAAAC,QAAQ,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACtC,GAAI,CACF,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CACvB,IAAI,CAACV,OAAO,qBAAAU,MAAA,CAAmB,IAAI,CAACT,QAAQ,EAC/C,CACEU,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,QAAQ,CAAE,YAAY,CACtB,cAAc,CAAE,kBAAkB,CAClC,YAAY,CAAE,IAAI,CAAClB,OACrB,CAAC,CACDmB,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBZ,IAAI,CAAEA,IAAI,CACVa,QAAQ,CAAE,uBAAuB,CACjCC,cAAc,CAAE,CACdC,SAAS,CAAE,GAAG,CACdC,gBAAgB,CAAE,IACpB,CACF,CAAC,CACH,CACF,CAAC,CAED,GAAI,CAACX,QAAQ,CAACY,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,oBAAoB,CAAC,CACvC,CAEA,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAd,QAAQ,CAACe,IAAI,CAAC,CAAC,CACvC,KAAM,CAAAC,QAAQ,CAAGC,GAAG,CAACC,eAAe,CAACJ,SAAS,CAAC,CAC/C,KAAM,CAAAK,KAAK,CAAG,GAAI,CAAAC,KAAK,CAACJ,QAAQ,CAAC,CACjC,KAAM,CAAAG,KAAK,CAACE,IAAI,CAAC,CAAC,CAEpB,CAAE,MAAO9B,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAA+B,SAASA,CAAA,CAAG,CAChB,GAAI,CACF,KAAM,CAAAtB,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAI,IAAI,CAACV,OAAO,YAAW,CACrDY,OAAO,CAAE,CACP,YAAY,CAAE,IAAI,CAAClB,OACrB,CACF,CAAC,CAAC,CAEF,GAAI,CAACc,QAAQ,CAACY,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,wBAAwB,CAAC,CAC3C,CAEA,MAAO,MAAM,CAAAb,QAAQ,CAACuB,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOhC,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAEA,cAAe,IAAI,CAAAP,iBAAiB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}