{"ast":null,"code":"// src/components/CallInterface.js\nimport React,{useState,useEffect,useRef}from'react';import{Button,VStack,HStack,Text,useToast,Modal,ModalOverlay,ModalContent,ModalHeader,ModalBody,ModalFooter,Input,useClipboard,Badge}from'@chakra-ui/react';import SocketService from'../services/SocketService';import AudioService from'../services/AudioService';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function CallInterface(_ref){let{isOpen,onClose,onCallStart}=_ref;const[roomId,setRoomId]=useState('');const[isInitiator,setIsInitiator]=useState(false);const[isConnected,setIsConnected]=useState(false);const[isConnecting,setIsConnecting]=useState(false);const[joinRoomId,setJoinRoomId]=useState('');const[participants,setParticipants]=useState(new Set());const toast=useToast();const{onCopy}=useClipboard(roomId);// Setup effect - runs when modal opens\nuseEffect(()=>{if(isOpen){console.log('Modal opened - connecting to socket server');connectToServer();}return()=>{if(!isConnected){console.log('Cleaning up unsuccessful connection');SocketService.disconnect();}};},[isOpen]);// Connection status effect\nuseEffect(()=>{if(isConnected){console.log('Connection established - transitioning to translation');toast({title:'Connected!',description:'You can start talking now',status:'success',duration:3000});onCallStart();}},[isConnected]);const connectToServer=async()=>{try{await SocketService.connect();setupSocketHandlers();}catch(error){console.error('Failed to connect to server:',error);toast({title:'Connection Error',description:'Failed to connect to server. Please try again.',status:'error',duration:5000});}};const setupSocketHandlers=()=>{SocketService.setAudioReceivedCallback((audio,language,userId)=>{console.log(\"Received audio from \".concat(userId,\" in \").concat(language));// Handle incoming audio - this will be processed by TranslationService\n});SocketService.setTranslationReceivedCallback(data=>{console.log('Received translation:',data);// Handle incoming translation\n});};const startCall=async()=>{console.log('Creating new room as initiator');setIsInitiator(true);setIsConnecting(true);try{const newRoomId=await SocketService.createRoom();setRoomId(newRoomId);setIsConnected(true);participants.add('You (Host)');setParticipants(new Set(participants));await SocketService.startStreaming();toast({title:'Room Created',description:'Share the room code with others to join',status:'success',duration:3000});}catch(error){console.error('Failed to create room:',error);toast({title:'Error',description:error.message||'Failed to create room',status:'error',duration:5000});setIsConnecting(false);setIsInitiator(false);}};const joinCall=async()=>{if(!joinRoomId){toast({title:'Error',description:'Please enter a room code',status:'error'});return;}console.log('Joining room as participant');setIsConnecting(true);try{await SocketService.joinRoom(joinRoomId);setRoomId(joinRoomId);setIsConnected(true);participants.add('You');setParticipants(new Set(participants));await SocketService.startStreaming();toast({title:'Connected!',description:'Successfully joined the room',status:'success',duration:3000});}catch(error){console.error('Failed to join room:',error);toast({title:'Connection Failed',description:error.message||'Failed to join room',status:'error',duration:5000});setIsConnecting(false);}};const endCall=()=>{console.log('Ending call');SocketService.disconnect();setIsConnected(false);setIsConnecting(false);setIsInitiator(false);setJoinRoomId('');setRoomId('');setParticipants(new Set());onClose();};const copyRoomId=()=>{onCopy();toast({title:'Copied!',description:'Room code copied to clipboard',status:'success',duration:2000});};const renderContent=()=>{if(isConnected){return/*#__PURE__*/_jsxs(VStack,{spacing:4,width:\"100%\",children:[/*#__PURE__*/_jsx(Text,{color:\"green.500\",fontWeight:\"bold\",children:\"Connected! You can start talking.\"}),/*#__PURE__*/_jsxs(Text,{fontSize:\"sm\",children:[\"Room Code: \",roomId]}),/*#__PURE__*/_jsx(Text,{fontSize:\"sm\",children:\"Participants:\"}),Array.from(participants).map((participant,index)=>/*#__PURE__*/_jsx(Badge,{colorScheme:\"green\",children:participant},index))]});}if(!isConnecting&&!isConnected){return/*#__PURE__*/_jsxs(HStack,{width:\"100%\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsx(Button,{colorScheme:\"blue\",onClick:startCall,children:\"Create New Room\"}),/*#__PURE__*/_jsx(Text,{children:\"or\"}),/*#__PURE__*/_jsx(Button,{colorScheme:\"green\",onClick:()=>setIsConnecting(true),children:\"Join Existing Room\"})]});}if(isConnecting&&!isConnected){if(isInitiator){return/*#__PURE__*/_jsxs(VStack,{width:\"100%\",spacing:4,children:[/*#__PURE__*/_jsx(Text,{children:\"Share this room code:\"}),/*#__PURE__*/_jsx(Input,{value:roomId,isReadOnly:true}),/*#__PURE__*/_jsx(Button,{onClick:copyRoomId,children:\"Copy Room Code\"})]});}return/*#__PURE__*/_jsxs(VStack,{width:\"100%\",spacing:4,children:[/*#__PURE__*/_jsx(Text,{children:\"Enter room code:\"}),/*#__PURE__*/_jsx(Input,{value:joinRoomId,onChange:e=>setJoinRoomId(e.target.value),placeholder:\"Paste room code here\"}),/*#__PURE__*/_jsx(Button,{colorScheme:\"green\",onClick:joinCall,children:\"Join Room\"})]});}};return/*#__PURE__*/_jsxs(Modal,{isOpen:isOpen,onClose:endCall,size:\"md\",children:[/*#__PURE__*/_jsx(ModalOverlay,{}),/*#__PURE__*/_jsxs(ModalContent,{children:[/*#__PURE__*/_jsx(ModalHeader,{children:\"Start Translation Call\"}),/*#__PURE__*/_jsx(ModalBody,{children:/*#__PURE__*/_jsx(VStack,{spacing:4,children:renderContent()})}),/*#__PURE__*/_jsx(ModalFooter,{children:/*#__PURE__*/_jsx(Button,{colorScheme:\"red\",onClick:endCall,children:\"End Call\"})})]})]});}export default CallInterface;","map":{"version":3,"names":["React","useState","useEffect","useRef","Button","VStack","HStack","Text","useToast","Modal","ModalOverlay","ModalContent","ModalHeader","ModalBody","ModalFooter","Input","useClipboard","Badge","SocketService","AudioService","jsx","_jsx","jsxs","_jsxs","CallInterface","_ref","isOpen","onClose","onCallStart","roomId","setRoomId","isInitiator","setIsInitiator","isConnected","setIsConnected","isConnecting","setIsConnecting","joinRoomId","setJoinRoomId","participants","setParticipants","Set","toast","onCopy","console","log","connectToServer","disconnect","title","description","status","duration","connect","setupSocketHandlers","error","setAudioReceivedCallback","audio","language","userId","concat","setTranslationReceivedCallback","data","startCall","newRoomId","createRoom","add","startStreaming","message","joinCall","joinRoom","endCall","copyRoomId","renderContent","spacing","width","children","color","fontWeight","fontSize","Array","from","map","participant","index","colorScheme","justifyContent","onClick","value","isReadOnly","onChange","e","target","placeholder","size"],"sources":["D:/AI Projects/translator/src/components/CallInterface.js"],"sourcesContent":["// src/components/CallInterface.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport {\n  Button,\n  VStack,\n  HStack,\n  Text,\n  useToast,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  useClipboard,\n  Badge,\n} from '@chakra-ui/react';\nimport SocketService from '../services/SocketService';\nimport AudioService from '../services/AudioService';\n\nfunction CallInterface({ isOpen, onClose, onCallStart }) {\n  const [roomId, setRoomId] = useState('');\n  const [isInitiator, setIsInitiator] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [joinRoomId, setJoinRoomId] = useState('');\n  const [participants, setParticipants] = useState(new Set());\n  const toast = useToast();\n  const { onCopy } = useClipboard(roomId);\n\n  // Setup effect - runs when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      console.log('Modal opened - connecting to socket server');\n      connectToServer();\n    }\n    return () => {\n      if (!isConnected) {\n        console.log('Cleaning up unsuccessful connection');\n        SocketService.disconnect();\n      }\n    };\n  }, [isOpen]);\n\n  // Connection status effect\n  useEffect(() => {\n    if (isConnected) {\n      console.log('Connection established - transitioning to translation');\n      toast({\n        title: 'Connected!',\n        description: 'You can start talking now',\n        status: 'success',\n        duration: 3000,\n      });\n      onCallStart();\n    }\n  }, [isConnected]);\n\n  const connectToServer = async () => {\n    try {\n      await SocketService.connect();\n      setupSocketHandlers();\n    } catch (error) {\n      console.error('Failed to connect to server:', error);\n      toast({\n        title: 'Connection Error',\n        description: 'Failed to connect to server. Please try again.',\n        status: 'error',\n        duration: 5000,\n      });\n    }\n  };\n\n  const setupSocketHandlers = () => {\n    SocketService.setAudioReceivedCallback((audio, language, userId) => {\n      console.log(`Received audio from ${userId} in ${language}`);\n      // Handle incoming audio - this will be processed by TranslationService\n    });\n\n    SocketService.setTranslationReceivedCallback((data) => {\n      console.log('Received translation:', data);\n      // Handle incoming translation\n    });\n  };\n\n  const startCall = async () => {\n    console.log('Creating new room as initiator');\n    setIsInitiator(true);\n    setIsConnecting(true);\n    \n    try {\n      const newRoomId = await SocketService.createRoom();\n      setRoomId(newRoomId);\n      setIsConnected(true);\n      participants.add('You (Host)');\n      setParticipants(new Set(participants));\n      \n      await SocketService.startStreaming();\n      \n      toast({\n        title: 'Room Created',\n        description: 'Share the room code with others to join',\n        status: 'success',\n        duration: 3000,\n      });\n    } catch (error) {\n      console.error('Failed to create room:', error);\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create room',\n        status: 'error',\n        duration: 5000,\n      });\n      setIsConnecting(false);\n      setIsInitiator(false);\n    }\n  };\n\n  const joinCall = async () => {\n    if (!joinRoomId) {\n      toast({\n        title: 'Error',\n        description: 'Please enter a room code',\n        status: 'error',\n      });\n      return;\n    }\n\n    console.log('Joining room as participant');\n    setIsConnecting(true);\n    \n    try {\n      await SocketService.joinRoom(joinRoomId);\n      setRoomId(joinRoomId);\n      setIsConnected(true);\n      participants.add('You');\n      setParticipants(new Set(participants));\n      \n      await SocketService.startStreaming();\n      \n      toast({\n        title: 'Connected!',\n        description: 'Successfully joined the room',\n        status: 'success',\n        duration: 3000,\n      });\n    } catch (error) {\n      console.error('Failed to join room:', error);\n      toast({\n        title: 'Connection Failed',\n        description: error.message || 'Failed to join room',\n        status: 'error',\n        duration: 5000,\n      });\n      setIsConnecting(false);\n    }\n  };\n\n  const endCall = () => {\n    console.log('Ending call');\n    SocketService.disconnect();\n    setIsConnected(false);\n    setIsConnecting(false);\n    setIsInitiator(false);\n    setJoinRoomId('');\n    setRoomId('');\n    setParticipants(new Set());\n    onClose();\n  };\n\n  const copyRoomId = () => {\n    onCopy();\n    toast({\n      title: 'Copied!',\n      description: 'Room code copied to clipboard',\n      status: 'success',\n      duration: 2000,\n    });\n  };\n\n  const renderContent = () => {\n    if (isConnected) {\n      return (\n        <VStack spacing={4} width=\"100%\">\n          <Text color=\"green.500\" fontWeight=\"bold\">\n            Connected! You can start talking.\n          </Text>\n          <Text fontSize=\"sm\">Room Code: {roomId}</Text>\n          <Text fontSize=\"sm\">Participants:</Text>\n          {Array.from(participants).map((participant, index) => (\n            <Badge key={index} colorScheme=\"green\">\n              {participant}\n            </Badge>\n          ))}\n        </VStack>\n      );\n    }\n\n    if (!isConnecting && !isConnected) {\n      return (\n        <HStack width=\"100%\" justifyContent=\"space-between\">\n          <Button colorScheme=\"blue\" onClick={startCall}>\n            Create New Room\n          </Button>\n          <Text>or</Text>\n          <Button colorScheme=\"green\" onClick={() => setIsConnecting(true)}>\n            Join Existing Room\n          </Button>\n        </HStack>\n      );\n    }\n\n    if (isConnecting && !isConnected) {\n      if (isInitiator) {\n        return (\n          <VStack width=\"100%\" spacing={4}>\n            <Text>Share this room code:</Text>\n            <Input value={roomId} isReadOnly />\n            <Button onClick={copyRoomId}>\n              Copy Room Code\n            </Button>\n          </VStack>\n        );\n      }\n      return (\n        <VStack width=\"100%\" spacing={4}>\n          <Text>Enter room code:</Text>\n          <Input\n            value={joinRoomId}\n            onChange={(e) => setJoinRoomId(e.target.value)}\n            placeholder=\"Paste room code here\"\n          />\n          <Button colorScheme=\"green\" onClick={joinCall}>\n            Join Room\n          </Button>\n        </VStack>\n      );\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={endCall} size=\"md\">\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Start Translation Call</ModalHeader>\n        <ModalBody>\n          <VStack spacing={4}>\n            {renderContent()}\n          </VStack>\n        </ModalBody>\n        <ModalFooter>\n          <Button colorScheme=\"red\" onClick={endCall}>\n            End Call\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default CallInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}