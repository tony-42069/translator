{"ast":null,"code":"// src/services/TranslationService.js\nimport ElevenLabsService from'./ElevenLabsService';class TranslationService{constructor(){this.recognition=null;this.isListening=false;this.onResultCallback=null;this.onErrorCallback=null;this.currentLanguage='sq-AL';// Default to Albanian\n// Get API key from React environment variable\nthis.apiKey=process.env.REACT_APP_GOOGLE_TRANSLATE_API_KEY;if(!this.apiKey){console.error('Google Translate API key not found in environment variables');}this.lastProcessedText='';this.processingQueue=[];this.isProcessing=false;}initialize(){if(!('webkitSpeechRecognition'in window)){throw new Error('Speech recognition not supported. Please use Chrome.');}this.recognition=new window.webkitSpeechRecognition();this.recognition.continuous=true;this.recognition.interimResults=true;this.recognition.lang=this.currentLanguage;this.recognition.onresult=async event=>{for(let i=event.resultIndex;i<event.results.length;i++){const transcript=event.results[i][0].transcript;if(event.results[i].isFinal&&transcript!==this.lastProcessedText){this.lastProcessedText=transcript;await this.handleSpeechResult(transcript);}}};this.recognition.onend=()=>{if(this.isListening){this.recognition.start();}};this.recognition.onerror=event=>{if(this.onErrorCallback){this.onErrorCallback(event.error);}};}async startListening(){if(!this.recognition){this.initialize();}this.isListening=true;try{await this.recognition.start();}catch(error){console.log('Restarting recognition...');this.recognition.stop();setTimeout(()=>this.recognition.start(),100);}}async stopListening(){this.isListening=false;if(this.recognition){this.recognition.stop();}}setLanguage(language){this.currentLanguage=language;if(this.recognition){const oldRecognition=this.recognition;oldRecognition.stop();this.recognition=null;this.initialize();if(this.isListening){this.startListening();}}}async translate(text,sourceLang,targetLang){try{if(!this.apiKey){throw new Error('Google Translate API key not found. Please check your environment variables.');}console.log(\"Translating from \".concat(sourceLang,\" to \").concat(targetLang,\": \").concat(text));const response=await fetch(\"https://translation.googleapis.com/language/translate/v2?key=\".concat(this.apiKey),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({q:text,source:sourceLang,target:targetLang,format:'text'})});if(!response.ok){var _errorData$error;const errorData=await response.json();console.error('Translation API response:',errorData);throw new Error(((_errorData$error=errorData.error)===null||_errorData$error===void 0?void 0:_errorData$error.message)||\"Translation failed with status: \".concat(response.status));}const data=await response.json();console.log('Translation response:',data);return data.data.translations[0].translatedText;}catch(error){console.error('Translation error:',error);throw error;}}async processQueue(){if(this.isProcessing||this.processingQueue.length===0)return;this.isProcessing=true;const text=this.processingQueue.shift();try{// Determine translation direction based on current language\nconst sourceLang=this.currentLanguage==='sq-AL'?'sq':'en';const targetLang=this.currentLanguage==='sq-AL'?'en':'sq';const translatedText=await this.translate(text,sourceLang,targetLang);await ElevenLabsService.textToSpeech(translatedText,targetLang);if(this.onResultCallback){this.onResultCallback(text,translatedText);}}catch(error){if(this.onErrorCallback){this.onErrorCallback(error);}}finally{this.isProcessing=false;if(this.processingQueue.length>0){this.processQueue();}}}async handleSpeechResult(text){this.processingQueue.push(text);this.processQueue();}setCallbacks(onResult,onError){this.onResultCallback=onResult;this.onErrorCallback=onError;}}export default new TranslationService();","map":{"version":3,"names":["ElevenLabsService","TranslationService","constructor","recognition","isListening","onResultCallback","onErrorCallback","currentLanguage","apiKey","process","env","REACT_APP_GOOGLE_TRANSLATE_API_KEY","console","error","lastProcessedText","processingQueue","isProcessing","initialize","window","Error","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","i","resultIndex","results","length","transcript","isFinal","handleSpeechResult","onend","start","onerror","startListening","log","stop","setTimeout","stopListening","setLanguage","language","oldRecognition","translate","text","sourceLang","targetLang","concat","response","fetch","method","headers","body","JSON","stringify","q","source","target","format","ok","_errorData$error","errorData","json","message","status","data","translations","translatedText","processQueue","shift","textToSpeech","push","setCallbacks","onResult","onError"],"sources":["D:/AI Projects/translator/src/services/TranslationService.js"],"sourcesContent":["// src/services/TranslationService.js\nimport ElevenLabsService from './ElevenLabsService';\n\nclass TranslationService {\n    constructor() {\n        this.recognition = null;\n        this.isListening = false;\n        this.onResultCallback = null;\n        this.onErrorCallback = null;\n        this.currentLanguage = 'sq-AL'; // Default to Albanian\n        // Get API key from React environment variable\n        this.apiKey = process.env.REACT_APP_GOOGLE_TRANSLATE_API_KEY;\n        if (!this.apiKey) {\n          console.error('Google Translate API key not found in environment variables');\n        }\n        this.lastProcessedText = '';\n        this.processingQueue = [];\n        this.isProcessing = false;\n    }\n    \n\n  initialize() {\n    if (!('webkitSpeechRecognition' in window)) {\n      throw new Error('Speech recognition not supported. Please use Chrome.');\n    }\n\n    this.recognition = new window.webkitSpeechRecognition();\n    this.recognition.continuous = true;\n    this.recognition.interimResults = true;\n    this.recognition.lang = this.currentLanguage;\n\n    this.recognition.onresult = async (event) => {\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        \n        if (event.results[i].isFinal && transcript !== this.lastProcessedText) {\n          this.lastProcessedText = transcript;\n          await this.handleSpeechResult(transcript);\n        }\n      }\n    };\n\n    this.recognition.onend = () => {\n      if (this.isListening) {\n        this.recognition.start();\n      }\n    };\n\n    this.recognition.onerror = (event) => {\n      if (this.onErrorCallback) {\n        this.onErrorCallback(event.error);\n      }\n    };\n  }\n\n  async startListening() {\n    if (!this.recognition) {\n      this.initialize();\n    }\n\n    this.isListening = true;\n    try {\n      await this.recognition.start();\n    } catch (error) {\n      console.log('Restarting recognition...');\n      this.recognition.stop();\n      setTimeout(() => this.recognition.start(), 100);\n    }\n  }\n\n  async stopListening() {\n    this.isListening = false;\n    if (this.recognition) {\n      this.recognition.stop();\n    }\n  }\n\n  setLanguage(language) {\n    this.currentLanguage = language;\n    if (this.recognition) {\n      const oldRecognition = this.recognition;\n      oldRecognition.stop();\n      this.recognition = null;\n      this.initialize();\n      if (this.isListening) {\n        this.startListening();\n      }\n    }\n  }\n\n  async translate(text, sourceLang, targetLang) {\n    try {\n      if (!this.apiKey) {\n        throw new Error('Google Translate API key not found. Please check your environment variables.');\n      }\n\n      console.log(`Translating from ${sourceLang} to ${targetLang}: ${text}`);\n      const response = await fetch(\n        `https://translation.googleapis.com/language/translate/v2?key=${this.apiKey}`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            q: text,\n            source: sourceLang,\n            target: targetLang,\n            format: 'text'\n          })\n        }\n      );\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Translation API response:', errorData);\n        throw new Error(errorData.error?.message || `Translation failed with status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Translation response:', data);\n      return data.data.translations[0].translatedText;\n    } catch (error) {\n      console.error('Translation error:', error);\n      throw error;\n    }\n  }\n\n  async processQueue() {\n    if (this.isProcessing || this.processingQueue.length === 0) return;\n\n    this.isProcessing = true;\n    const text = this.processingQueue.shift();\n\n    try {\n      // Determine translation direction based on current language\n      const sourceLang = this.currentLanguage === 'sq-AL' ? 'sq' : 'en';\n      const targetLang = this.currentLanguage === 'sq-AL' ? 'en' : 'sq';\n      \n      const translatedText = await this.translate(text, sourceLang, targetLang);\n      await ElevenLabsService.textToSpeech(translatedText, targetLang);\n\n      if (this.onResultCallback) {\n        this.onResultCallback(text, translatedText);\n      }\n    } catch (error) {\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    } finally {\n      this.isProcessing = false;\n      if (this.processingQueue.length > 0) {\n        this.processQueue();\n      }\n    }\n  }\n\n  async handleSpeechResult(text) {\n    this.processingQueue.push(text);\n    this.processQueue();\n  }\n\n  setCallbacks(onResult, onError) {\n    this.onResultCallback = onResult;\n    this.onErrorCallback = onError;\n  }\n}\n\nexport default new TranslationService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}